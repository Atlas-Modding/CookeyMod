plugins {
	id 'fabric-loom' version '0.5-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	// Repo for CT intermediary mappings
	maven {
		name "CombatReforged"
		url "https://maven.combatreforged.com"
	}
}

configurations {
	includeClasspath
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings minecraft.officialMojangMappings()
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modApi("me.shedaniel.cloth:config-2:${project.cloth_config_api_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}
	include "me.shedaniel.cloth:config-2:${project.cloth_config_api_version}"

	implementation "com.moandjiezana.toml:toml4j:${project.toml4j_version}"
	includeClasspath "com.moandjiezana.toml:toml4j:${project.toml4j_version}"

	// Local jars
	modApi "net.fabricmc.fabric-api:fabric-api-base:0.2.0+9f0fb4b898"
	modApi "net.fabricmc.fabric-api:fabric-command-api-v1:1.0.9+a4467d2a98"
	modApi "net.fabricmc.fabric-api:fabric-resource-loader-v0:0.3.2+facf3bbf98"

	modImplementation("io.github.prospector:modmenu:${project.modmenu_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}
}

// Custom Manifest and Intermediary mappings declaration
minecraft {
	customManifest = "https://gist.githubusercontent.com/rizecookey/4c6142baaccc3875f9b227fe22f2ace5/raw/c8ed74b19f7a5315813c9d4b199798b692a8f359/1.16_combat-6.json"
	intermediaryUrl = { mcVersion ->
		return "https://maven.combatreforged.com/net/fabricmc/intermediary/${mcVersion}/intermediary-${mcVersion}-v2.jar";
	}
}

processResources {
	inputs.property "version", project.version

	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand "version": project.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
	}
}

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

jar {
	from "LICENSE"
	from {
		configurations.includeClasspath.collect { it.isDirectory() ? it : zipTree(it) }

	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	repositories {
		// mavenLocal()
	}
}